/*! \mainpage Documentation
   
    \section intro_sec Introduction
   
    In this page you will find information about our semi-predictive context 
    algorithm implementation. The source code and documentation can be browsed 
    from this page and can also be cloned from this
    <a href="https://github.com/drencrom/context">github repository</a>.

	Also the source code for this algorithm can be downloaded
	<a href="context-src.tgz">here</a>.
   
    \section install_sec Installation
   
    \subsection unix Unix
   
    The included Makefile can be used to compile the project in a GNU
    environment. This file creates two executable files: <i>context</i> and
    <i>context.opt</i>. The first one is the debug version and the second is the
    optimized version. The debug version defines the <tt>DEBUG</tt> preprocessor
    variable. The <i>mode</i> variable in the Makefile determines if 
    a 64 bit or 32 bit version of the binary is produced.
   
    In addition to those files, two links to them are created called
    <i>uncontext</i> and <i>uncontext.opt</i>. These can be used to decompress
    files without the needing to specify any command line options.
   
    The GSL library is needed for compilation. It must be located in any
    of the default library directories. If this is not so the appropriate
    environment variables should be adjusted (i.e. <tt>LD_LIBRARY_PATH</tt>, etc.)
   
    This makefile can also be used to generate the program documentation and
    this web page. To do so the command <tt>make doc</tt> must be executed. For it
    to work the the doxygen documentation utility must be installed in the
    system.
   
    To clean the object code files created during compilation <tt>make clean</tt> must
    be executed. Furthermore the <tt>make doc-clean</tt> command deletes all the
    generated documentation.
   
    \subsection windows Windows
   
    The included Makefile can be used to compile the project in Windows using
    gcc if the variable <tt>os</tt> is set to <i>windows</i>. Cygwin is needed
    for this to work.

    \section usage Usage
    
    context [options] input_file [output_file]<br/>
    uncontext [options] input_file [output_file]
    
    Options:
    <ul>
    		<li>
            -z: compress (default)
    		</li>
    		<li>
            -d: decompress (default if invoked as uncontext)
    		</li>
    		<li>
            -s: use secondary espace estimation (SEE)
    		</li>
    		<li>
            -h: show this message
    		</li>
    </ul>
   
    Options for compression only:
    <ul>
    		<li>
            -k: use Kurtz algorithm (default)
    		</li>
    		<li>
            -u: use Ukkonnen algorithm (default with -b)
    		</li>
    		<li>
            -p <num>: number of parts to partition the file
    		</li>
    </ul>
    
    When the file is invoked as <i>context</i> compression is the default
    action. When invoked as <i>uncontext</i> decompression is the default.
    
    The default output_file for compression is input_file.ctx. When
    decompressing the default output file is the input file with the
    extension removed. If the input file does not have an extension the
    default output file wil be input_file.out
    
    The -k and -u options select the algorithm that will be used to build
    the context tree of the input string.
   
    \section arithmetic Arithmetic Encoder
   
    The <i>arithmetic</i> directory contains the arithemtic encoder/decoder
    source code as taken from 
    <a href="http://dogma.net/markn/articles/arith/part1.htm">this article</a>
   
    \section binaries Binaries

	Precompiled binary files:
    <ul>
    		<li>
            Windows: <a href="windows/context.exe">context.exe</a>
    		</li>
    		<li>
            Linux (32 bits): <a href="linux32/context">context</a>
    		</li>
    		<li>
            Linux (64 bits): <a href="linux64/context">context</a>
    		</li>
    </ul>
 */
